---
type SectionBaseProps = {
  /** Section id */
  id: string;
};
type SectionWithVideoProps = SectionBaseProps & {
  /** Video url */
  video: string;
  /** If screen is true, then the section is in fullscreen */
  screen?: never;
  /** If controls is true, then show the buttons */
  controls?: boolean;
};
type SectionWithoutVideoProps = SectionBaseProps & {
  /** Video url */
  video?: never;
  /** If screen is true, then the section is in fullscreen */
  screen?: boolean;
  /** If controls is true, then show the buttons */
  controls?: never;
};
type Props = SectionWithVideoProps | SectionWithoutVideoProps;

const { id, video, screen, controls } = Astro.props;

// tw variant
// section => bg
---

{
  video ? (
    <section
      id={id}
      class="relative h-screen flex flex-col items-center justify-center text-center text-white py-0 px-3"
    >
      <div class="absolute h-full left-0 overflow-hidden top-0 w-full">
        <video
          class="min-w-full min-h-full absolute object-cover"
          autoplay
          muted
          loop
          src={video}
          data-hero-video
        />
      </div>
      <div class="absolute w-full h-screen flex justify-center items-center flex-col">
        <div class="bg-black/50 p-3 rounded-lg font-courgette shadow-hero shadow-yellow-300 mx-2">
          <slot />
        </div>
      </div>
      {controls && (
        <div class="absolute top-3 right-3">
          <button
            data-toggle-video-state-button
            class="bg-slate-950 text-white opacity-80 hover:opacity-100 transition-opacity rounded-full border-2 border-slate-950"
          />
          <button>Volume</button>
        </div>
      )}
    </section>
  ) : (
    <section
      id={id}
      class:list={[
        "flex justify-center items-center",
        { "min-h-screen": screen },
      ]}
    >
      <slot />
    </section>
  )
}

<script>
  import { useControlsVideo } from "../../lib/useControlsVideo";

  useControlsVideo(
    {
      video: "[data-hero-video]",
      btnState: "[data-toggle-video-state-button]",
    },
    {
      // muted: false,
      onPlay: () => {
        console.log("play");
      },
      onPause: () => {
        console.log("pause");
      },
      playContent: `
<svg fill="currentColor" stroke-width="0" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="2rem" class="overflow-visible text-current aspect-square">
  <path d="M256 512a256 256 0 1 0 0-512 256 256 0 1 0 0 512zm-32-320v128c0 17.7-14.3 32-32 32s-32-14.3-32-32V192c0-17.7 14.3-32 32-32s32 14.3 32 32zm128 0v128c0 17.7-14.3 32-32 32s-32-14.3-32-32V192c0-17.7 14.3-32 32-32s32 14.3 32 32z" />
</svg>
      `,
      pauseContent: `
<svg fill="currentColor" stroke-width="0" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="2rem" class="overflow-visible text-current aspect-square">
  <path d="M0 256a256 256 0 1 1 512 0 256 256 0 1 1-512 0zm188.3-108.9c-7.6 4.2-12.3 12.3-12.3 20.9v176c0 8.7 4.7 16.7 12.3 20.9s16.8 4.1 24.3-.5l144-88c7.1-4.4 11.5-12.1 11.5-20.5s-4.4-16.1-11.5-20.5l-144-88c-7.4-4.5-16.7-4.7-24.3-.5z" />
</svg>
      `,
    }
  );
</script>
